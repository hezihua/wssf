(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{451:function(a,e,r){"use strict";r.r(e);var t=r(2),v=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[a._v("#")]),a._v(" dockerfile")]),a._v(" "),e("h1",{attrs:{id:"可以自定义镜像内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可以自定义镜像内容"}},[a._v("#")]),a._v(" 可以自定义镜像内容")]),a._v(" "),e("h1",{attrs:{id:"语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),e("p",[a._v("From 基础镜像")]),a._v(" "),e("p",[a._v("MAINTAINER name -- 指定镜像作者")]),a._v(" "),e("p",[a._v("LABEL key=value  -- 标签")]),a._v(" "),e("p",[a._v("ENV key=value key>=value -- 设置环境变量")]),a._v(" "),e("p",[a._v('RUN ["executable", "param1", "param2"]  --镜像构建过程中要执行的命令')]),a._v(" "),e("p",[a._v("ADD src dest  --把src 目录中的文件复制到容器中的 dest 目录")]),a._v(" "),e("p",[a._v("WORKDIR dir --设置工作目录，可以简单理解为 cd 到指定目录，如果该目录不存在会自动创建，对 RUN、CMD、ENTRYPOINT、COPY、ADD 生效，可以设置多次 WORKDIR")]),a._v(" "),e("p",[a._v("VOLUME dir dir  --设置挂载目录，可以将主机中的指定目录挂载到容器中")]),a._v(" "),e("p",[a._v("EXPOSE port tcp/udp")]),a._v(" "),e("p",[a._v("CMD command param1 param2  --该镜像启动容器时默认执行的命令或参数")]),a._v(" "),e("p",[a._v("ARG name=default value  --设置变量，在镜像中定义一个变量，当使用 docker build 命令构建镜像时，带上 --build-arg name=value 来指定参数值，如果该变量名在 Dockerfile 中不存在则会抛出一个警告")]),a._v(" "),e("h1",{attrs:{id:"构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[a._v("#")]),a._v(" 构建镜像")]),a._v(" "),e("p",[a._v("docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]  --基于一个现有的容器，构建一个新的镜像")]),a._v(" "),e("p",[a._v("docker build -t ImageName:TagName dockerfile dir基于一个 Dockerfile 构建镜像")])])}),[],!1,null,null,null);e.default=v.exports}}]);